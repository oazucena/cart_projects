# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import car_pb2 as car__pb2


class CarStub(object):
    """The greeting service definition.
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.direction = channel.unary_unary(
                '/omicron.Car/direction',
                request_serializer=car__pb2.DirectionRequest.SerializeToString,
                response_deserializer=car__pb2.DirectionReply.FromString,
                )
        self.state = channel.unary_stream(
                '/omicron.Car/state',
                request_serializer=car__pb2.Empty.SerializeToString,
                response_deserializer=car__pb2.CarStateInfo.FromString,
                )
        self.change = channel.stream_unary(
                '/omicron.Car/change',
                request_serializer=car__pb2.CarStateInfoStatus.SerializeToString,
                response_deserializer=car__pb2.Empty.FromString,
                )


class CarServicer(object):
    """The greeting service definition.
    """

    def direction(self, request, context):
        """Sends a greeting
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def state(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def change(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CarServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'direction': grpc.unary_unary_rpc_method_handler(
                    servicer.direction,
                    request_deserializer=car__pb2.DirectionRequest.FromString,
                    response_serializer=car__pb2.DirectionReply.SerializeToString,
            ),
            'state': grpc.unary_stream_rpc_method_handler(
                    servicer.state,
                    request_deserializer=car__pb2.Empty.FromString,
                    response_serializer=car__pb2.CarStateInfo.SerializeToString,
            ),
            'change': grpc.stream_unary_rpc_method_handler(
                    servicer.change,
                    request_deserializer=car__pb2.CarStateInfoStatus.FromString,
                    response_serializer=car__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'omicron.Car', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Car(object):
    """The greeting service definition.
    """

    @staticmethod
    def direction(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/omicron.Car/direction',
            car__pb2.DirectionRequest.SerializeToString,
            car__pb2.DirectionReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def state(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/omicron.Car/state',
            car__pb2.Empty.SerializeToString,
            car__pb2.CarStateInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def change(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_unary(request_iterator, target, '/omicron.Car/change',
            car__pb2.CarStateInfoStatus.SerializeToString,
            car__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
